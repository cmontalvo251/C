README

DON'T OPEN THE ARCHIVE FOLDER UNLESS YOU KNOW WHAT YOU'RE DOING

0.) I'm assuming you mkdir C directory and then either git cloned
$ git clone 'https://www.github.com/cmontalvo251/C.git'

or if you have an SSH key you can run the standard

$ git init
$ git remote add origin 'git@github.com:cmontalvo251/C.git'
$ git pull origin master

-.) This is optional but if you're reading this README on Sublime you probably want to get the Tasks app. So first install package control. Then install package and install Plain tasks. Then open the Work_Tasks and you can see all the work tasks. In the bottom right open the extension and select Tasks. If you want to change the theme go to preferences, package settings and edit the theme.

1.) There are supplemental routines in HIL.git so do another git clone or git pull with SSH-key for HIL.git

2.) Let's talk a bit about the folder structure for FASTsim. FASTsim works with multiple vehicles where the 6DOF dynamics are the same but certain files are different. 

The default is FASTSim/PortalCube/src. You can change the FASTSim/PortalCube to whatever you want in the Makefile but you
need to follow a specific structure for other vehicles. 

src has the following files
controller.cpp
controller.h
aerodynamics.cpp
aerodynamics.h

Those 4 files are heavily commented and you can open them up to see how to create your own controller and aerodynamics

Input_Files contains all of the input files required for the simulation. Again portalcube has example input
files and they are pretty self explanatory

Finally the objects folder has all of the files necessary to render an object in openGL. In this case you need an obj file and a mtl file along with a texture file. 

It's possible to made a CAD for an object in blender and save it as a
*.blend. What you then need to do is add a texture to the UV tab. Then
select all the vertices in edit mode of your object and hit U for
unwrap. Once you do that you can export everything to an OBJ. If you
did it right you can open the obj file in plain text and you will see
v for vertices vn for normals vt for texture vertices and then f for
face in the format f v/vt/vn. When you export as an OBJ just make sure
you select "Triangulate Faces"  

You might need to open up the mtl file and make sure the path to the texture is correct.

3.) Now it's time to open the Makefile and set the proper directives.

The main directives are 

EXETYPE
HARDWARE
CONTROLLER
RENDER
HPATH

The explanation of these directives are in the Makefile

4.) With the Makefile set you can compile with the following command

$ make

This will create an executable called FASTSim.exe

5.) When running the code you must give the simulation the file path to your set of input files. The default is to run the PortalCube input files. In this case you would run

$ ./FASTSim.exe PortalCube/

If you mess up and just run

$ ./FASTSim.exe 

it will default to the portal cube

6.) The FASTSim.exe will create a log file in logs/ You can run 

$ ./clean_logs

to clean all of the logs in that directory if it starts to get bloated.

7.) The python script process_logs.py will plot the 0.txt log file. You can edit the code to log the data from a different log file but be careful with the script because if you run process logs without any arguments it will delete the entire log folder first. Perhaps this is a bad coding idea but it's what I have right now.

$ ./process_logs.py 

If you run the script just like that you will hopefully be greeted with a ton of plots. I don't really want to go over the nomenclature of a 6DOF vehicle but just understand that the dynamics routine uses a standard aerospace convention of a 6DOF vehicle using quaternions for the attitude states.

8.) If you recompile the code in SIL mode you will hopefully be greeted with an openGL screen. First make sure you run a make rebuild to recompile everything. Second if you get a location of file error open your Render.txt file and make sure the file path is set correctly. 